1
00:00:00,250 --> 00:00:03,866
FFmpeg, an open source command line tool for processing audio

2
00:00:03,898 --> 00:00:07,550
and video files. It was created by Fabrice Ballard in the year 2000.

3
00:00:07,620 --> 00:00:11,546
The name stands for Fast forward, followed by the Moving Picture Experts Group file

4
00:00:11,578 --> 00:00:15,166
format. Today, it's used in a wide variety of tools like Google Chrome and

5
00:00:15,188 --> 00:00:18,686
Blender, as well as video platforms like YouTube and Vimeo. It's able

6
00:00:18,708 --> 00:00:22,122
to decode, encode, transcode, multiplex, Demultiplex,

7
00:00:22,186 --> 00:00:25,814
Stream, filter, and play virtually any multimedia file in the world with

8
00:00:25,852 --> 00:00:29,602
over 100 different codecs supported. It works by taking an input file,

9
00:00:29,666 --> 00:00:33,026
then passes it to a demultiplexer that splits the audio

10
00:00:33,058 --> 00:00:36,934
and video tracks into separate encoded data packets. These packets are then

11
00:00:36,972 --> 00:00:40,506
decoded into uncompressed frames, which can be further processed and

12
00:00:40,528 --> 00:00:43,910
filtered. You might modify the brightness and contrast, add subtitles,

13
00:00:43,990 --> 00:00:47,846
or visualize the audio as a waveform. Then finally, these frames are encoded

14
00:00:47,878 --> 00:00:51,546
and multiplexed back into the output file. In addition, it also comes

15
00:00:51,568 --> 00:00:55,214
with the FF Play tool to easily play media from the command line and

16
00:00:55,252 --> 00:00:58,718
FF probe to extract metadata from a file, in addition to tons of

17
00:00:58,724 --> 00:01:02,314
low level libraries for developers building their own multimedia processing

18
00:01:02,362 --> 00:01:05,722
software. To get started, install it, then open up the terminal,

19
00:01:05,786 --> 00:01:09,314
use the FFmpeg command followed by I to supply one

20
00:01:09,352 --> 00:01:12,542
or more input files. To convert that file to a different format,

21
00:01:12,606 --> 00:01:15,806
simply provide the name of the output. It will automatically detect the file

22
00:01:15,838 --> 00:01:19,394
extension and convert it to the proper codec. Or the CFlag can be used

23
00:01:19,432 --> 00:01:23,126
to specify an explicit codec like MPEG four for the video track and

24
00:01:23,148 --> 00:01:26,786
MP3 for the audio. You may also want to change the quality of the output

25
00:01:26,818 --> 00:01:30,006
file. The B flag can change the bitrate, while the R

26
00:01:30,028 --> 00:01:33,754
flag can change the frame rate and S can change the resolution. In some

27
00:01:33,792 --> 00:01:37,114
cases, you may have multiple video clips that need to be combined together.

28
00:01:37,232 --> 00:01:40,826
These clips can be listed in their own text file, then combined together by

29
00:01:40,848 --> 00:01:44,102
specifying the format as Concat and the codec as copy.

30
00:01:44,166 --> 00:01:47,694
Copy can also be used to make modifications to a video, like when used with

31
00:01:47,732 --> 00:01:51,098
T to trim a certain number of seconds off of the video footage.

32
00:01:51,194 --> 00:01:54,506
But the most powerful option might be VF, which creates a filter

33
00:01:54,538 --> 00:01:57,802
graph that can handle transformations like rotation and scaling,

34
00:01:57,866 --> 00:02:01,294
and color modifications like brightness and contrast, in addition to

35
00:02:01,332 --> 00:02:05,350
many other effects. And if you have an SRT file for captions in your video,

36
00:02:05,420 --> 00:02:08,518
FFmpEg is able to convert it to an as file, which can

37
00:02:08,524 --> 00:02:11,766
then be used with the VF option to easily add subtitles to

38
00:02:11,788 --> 00:02:15,042
your video. This has been FFmpeg in 100 seconds.

39
00:02:15,106 --> 00:02:18,486
Hit the like button for more short videos like this. Thanks for watching, and I

40
00:02:18,508 --> 00:02:19,540
will see you in the next one.

1
00:00:00,250 --> 00:00:04,094
FFmpeg, an open source command line tool for processing audio and

2
00:00:04,132 --> 00:00:07,550
video files. It was created by Fabrice Ballard in the year 2000.

3
00:00:07,620 --> 00:00:10,906
The name stands for Fast forward, followed by the Moving Picture Experts

4
00:00:10,938 --> 00:00:14,254
Group file format. Today, it's used in a wide variety of tools like

5
00:00:14,292 --> 00:00:18,282
Google Chrome and Blender, as well as video platforms like YouTube and Vimeo.

6
00:00:18,346 --> 00:00:21,242
It's able to decode, encode, transcode, multiplex,

7
00:00:21,306 --> 00:00:25,158
Demultiplex, Stream, filter, and play virtually any multimedia file in

8
00:00:25,164 --> 00:00:28,758
the world with over 100 different codecs supported. It works by taking an

9
00:00:28,764 --> 00:00:31,922
input file, then passes it to a demultiplexer

10
00:00:31,986 --> 00:00:35,414
that splits the audio and video tracks into separate encoded data

11
00:00:35,452 --> 00:00:39,366
packets. These packets are then decoded into uncompressed frames, which can

12
00:00:39,388 --> 00:00:42,822
be further processed and filtered. You might modify the brightness and contrast,

13
00:00:42,886 --> 00:00:46,602
add subtitles, or visualize the audio as a waveform. Then finally,

14
00:00:46,656 --> 00:00:49,926
these frames are encoded and multiplexed back into the output

15
00:00:49,958 --> 00:00:53,686
file. In addition, it also comes with the FF Play tool to easily play

16
00:00:53,728 --> 00:00:57,358
media from the command line and FF probe to extract metadata from a

17
00:00:57,364 --> 00:01:00,926
file, in addition to tons of low level libraries for developers building their

18
00:01:00,948 --> 00:01:04,414
own multimedia processing software. To get started, install it,

19
00:01:04,452 --> 00:01:08,034
then open up the terminal, use the FFmpeg command followed by

20
00:01:08,072 --> 00:01:11,698
I to supply one or more input files. To convert that file to

21
00:01:11,704 --> 00:01:15,326
a different format, simply provide the name of the output. It will automatically detect

22
00:01:15,358 --> 00:01:19,058
the file extension and convert it to the proper codec. Or the CFlag can

23
00:01:19,064 --> 00:01:22,870
be used to specify an explicit codec like MPEG four for the video track

24
00:01:22,940 --> 00:01:26,246
and MP3 for the audio. You may also want to change the quality of

25
00:01:26,268 --> 00:01:29,234
the output file. The B flag can change the bitrate,

26
00:01:29,282 --> 00:01:32,666
while the R flag can change the frame rate and S can change the

27
00:01:32,688 --> 00:01:36,026
resolution. In some cases, you may have multiple video clips that need

28
00:01:36,048 --> 00:01:39,494
to be combined together. These clips can be listed in their own text file,

29
00:01:39,542 --> 00:01:42,826
then combined together by specifying the format as Concat and

30
00:01:42,848 --> 00:01:46,366
the codec as copy. Copy can also be used to make modifications to

31
00:01:46,388 --> 00:01:50,014
a video, like when used with T to trim a certain number of seconds off

32
00:01:50,052 --> 00:01:54,026
of the video footage. But the most powerful option might be VF, which creates

33
00:01:54,058 --> 00:01:57,802
a filter graph that can handle transformations like rotation and scaling,

34
00:01:57,866 --> 00:02:01,534
and color modifications like brightness and contrast, in addition to many

35
00:02:01,572 --> 00:02:05,350
other effects. And if you have an SRT file for captions in your video,

36
00:02:05,420 --> 00:02:09,014
FFmpEg is able to convert it to an as file, which can then be used

37
00:02:09,052 --> 00:02:12,406
with the VF option to easily add subtitles to your video.

38
00:02:12,508 --> 00:02:16,166
This has been FFmpeg in 100 seconds. Hit the like button for more

39
00:02:16,188 --> 00:02:19,414
short videos like this. Thanks for watching, and I will see you in the next

40
00:02:19,452 --> 00:02:19,540
one.

