WEBVTT

00:00.250 --> 00:03.866
FFmpeg, an open source command line tool for processing audio

00:03.898 --> 00:07.550
and video files. It was created by Fabrice Ballard in the year 2000.

00:07.620 --> 00:11.546
The name stands for Fast forward, followed by the Moving Picture Experts Group file

00:11.578 --> 00:14.954
format. Today, it's used in a wide variety of tools like Google Chrome

00:15.002 --> 00:18.686
and Blender, as well as video platforms like YouTube and Vimeo. It's able

00:18.708 --> 00:21.242
to decode, encode, transcode, multiplex,

00:21.306 --> 00:25.158
Demultiplex, Stream, filter, and play virtually any multimedia file in

00:25.164 --> 00:28.758
the world with over 100 different codecs supported. It works by taking an

00:28.764 --> 00:32.546
input file, then passes it to a demultiplexer that splits

00:32.578 --> 00:35.970
the audio and video tracks into separate encoded data packets.

00:36.050 --> 00:40.318
These packets are then decoded into uncompressed frames, which can be further processed

00:40.354 --> 00:44.646
and filtered. You might modify the brightness and contrast, add subtitles, or visualize

00:44.678 --> 00:47.846
the audio as a waveform. Then finally, these frames are encoded

00:47.878 --> 00:50.902
and multiplexed back into the output file. In addition,

00:50.966 --> 00:54.366
it also comes with the FF Play tool to easily play media from the

00:54.388 --> 00:57.626
command line and FF probe to extract metadata from a file,

00:57.658 --> 01:01.086
in addition to tons of low level libraries for developers building their own

01:01.108 --> 01:04.414
multimedia processing software. To get started, install it,

01:04.452 --> 01:07.806
then open up the terminal, use the FFmpeg command followed

01:07.838 --> 01:11.118
by I to supply one or more input files. To convert

01:11.134 --> 01:14.546
that file to a different format, simply provide the name of the output. It will

01:14.568 --> 01:17.982
automatically detect the file extension and convert it to the proper codec.

01:18.046 --> 01:21.746
Or the CFlag can be used to specify an explicit codec like MPEG

01:21.778 --> 01:25.398
four for the video track and MP3 for the audio. You may also want to

01:25.404 --> 01:28.534
change the quality of the output file. The B flag can change

01:28.572 --> 01:32.102
the bitrate, while the R flag can change the frame rate and S

01:32.156 --> 01:35.686
can change the resolution. In some cases, you may have multiple video clips

01:35.718 --> 01:39.082
that need to be combined together. These clips can be listed in their own text

01:39.136 --> 01:42.614
file, then combined together by specifying the format as Concat

01:42.662 --> 01:46.366
and the codec as copy. Copy can also be used to make modifications to

01:46.388 --> 01:49.786
a video, like when used with T to trim a certain number of seconds

01:49.818 --> 01:54.026
off of the video footage. But the most powerful option might be VF, which creates

01:54.058 --> 01:57.294
a filter graph that can handle transformations like rotation and

01:57.332 --> 02:01.294
scaling, and color modifications like brightness and contrast, in addition to

02:01.332 --> 02:04.798
many other effects. And if you have an SRT file for captions in

02:04.804 --> 02:08.114
your video, FFmpEg is able to convert it to an as file,

02:08.162 --> 02:11.766
which can then be used with the VF option to easily add subtitles to

02:11.788 --> 02:15.042
your video. This has been FFmpeg in 100 seconds.

02:15.106 --> 02:18.038
Hit the like button for more short videos like this. Thanks for watching,

02:18.124 --> 02:19.540
and I will see you in the next one.
WEBVTT

00:00.250 --> 00:03.866
FFmpeg, an open source command line tool for processing audio

00:03.898 --> 00:07.086
and video files. It was created by Fabrice Ballard in the year

00:07.108 --> 00:10.906
2000. The name stands for Fast forward, followed by the Moving Picture Experts

00:10.938 --> 00:14.542
Group file format. Today, it's used in a wide variety of tools like Google

00:14.596 --> 00:17.806
Chrome and Blender, as well as video platforms like YouTube and

00:17.828 --> 00:20.634
Vimeo. It's able to decode, encode, transcode,

00:20.682 --> 00:24.046
multiplex, Demultiplex, Stream, filter, and play virtually any

00:24.068 --> 00:27.682
multimedia file in the world with over 100 different codecs supported.

00:27.746 --> 00:31.922
It works by taking an input file, then passes it to a demultiplexer

00:31.986 --> 00:35.970
that splits the audio and video tracks into separate encoded data packets.

00:36.050 --> 00:39.366
These packets are then decoded into uncompressed frames, which can

00:39.388 --> 00:42.822
be further processed and filtered. You might modify the brightness and contrast,

00:42.886 --> 00:46.602
add subtitles, or visualize the audio as a waveform. Then finally,

00:46.656 --> 00:49.926
these frames are encoded and multiplexed back into the output

00:49.958 --> 00:53.146
file. In addition, it also comes with the FF Play tool to

00:53.168 --> 00:57.066
easily play media from the command line and FF probe to extract metadata

00:57.098 --> 01:00.702
from a file, in addition to tons of low level libraries for developers building

01:00.756 --> 01:03.630
their own multimedia processing software. To get started,

01:03.700 --> 01:07.374
install it, then open up the terminal, use the FFmpeg command

01:07.422 --> 01:11.118
followed by I to supply one or more input files. To convert

01:11.134 --> 01:14.546
that file to a different format, simply provide the name of the output. It will

01:14.568 --> 01:18.386
automatically detect the file extension and convert it to the proper codec. Or the

01:18.408 --> 01:22.166
CFlag can be used to specify an explicit codec like MPEG four for

01:22.188 --> 01:25.286
the video track and MP3 for the audio. You may also want

01:25.308 --> 01:29.234
to change the quality of the output file. The B flag can change the bitrate,

01:29.282 --> 01:32.666
while the R flag can change the frame rate and S can change the

01:32.688 --> 01:36.646
resolution. In some cases, you may have multiple video clips that need to be combined

01:36.678 --> 01:40.506
together. These clips can be listed in their own text file, then combined together

01:40.608 --> 01:44.102
by specifying the format as Concat and the codec as copy.

01:44.166 --> 01:47.694
Copy can also be used to make modifications to a video, like when used with

01:47.732 --> 01:51.098
T to trim a certain number of seconds off of the video footage.

01:51.194 --> 01:54.506
But the most powerful option might be VF, which creates a filter

01:54.538 --> 01:57.802
graph that can handle transformations like rotation and scaling,

01:57.866 --> 02:01.294
and color modifications like brightness and contrast, in addition to

02:01.332 --> 02:04.634
many other effects. And if you have an SRT file for captions

02:04.682 --> 02:08.518
in your video, FFmpEg is able to convert it to an as file, which can

02:08.524 --> 02:12.406
then be used with the VF option to easily add subtitles to your video.

02:12.508 --> 02:15.734
This has been FFmpeg in 100 seconds. Hit the like button

02:15.772 --> 02:19.126
for more short videos like this. Thanks for watching, and I will see you in

02:19.148 --> 02:19.540
the next one.
